				Термины
Фикстура - это всопомгательная функция для теста, которая не является частью тестового сценария.
Пример: фикстура инициализирующая браузер. Она вернёт объект, который будет использоваться в тестовом сценарии.
Фикстуры можно создавать для модулей, классов и отдельных функций.
@pytest.fixture - декоратор, указывающий, что метод является фикстурой


Тест-сьют (Test Suite, TS) - компелкт тестов для исследуемого компонента или системы.
Тест-сьюты часто оформляют в виде классов.


Финализатор - специальный метод, вызываемый перед удалением объекта сборщиком мусора.
Один из вариантов финализатора — использование ключевого слова Python: yield.


Фреймворк - заготовка, на базе которой пишут код. Удобен для быстрой разработки ч.л.
Пример: Любая библиотека, к примеру Jango или TensorFlow


Маркировка - отмечание тестов с целью деления на категории.
Это позволяет запускать тесты выбранной категории, пропускать необязательные тесты и т.д.
@pytest.mark.mark_name - декоратор, устанавливающий марку для теста (mark_name - произвольное имя метки)

Метки рекомендуется регистрировать в pytest.ini файлах, чтобы исключить случаи,
когда тесты не запускаются по причине указания для них несуществующей марки.


Параметризация тестов - возможность запуска теста с разными входными параметрами.
Пример: запуск теста для сайта с разными языками.

@pytest.mark.parametrize() - декоратор, в котором указываются параметры и их возможные значения для теста.
Пример:
@pytest.mark.parametrize('language', ["ru", "en-gb"])



Конфигурация тестов - возможность сохранить частоупотребимые фикстуры и глобальные настройки для тестов, чтобы не 
указывать их для тестов, что лежат в разных файлах.

Создание файла conftest.py в директории верхнего уровня проекта с тестами задаст конфигурацию для тестов.

PyTest автоматически находит и подгружает файлы
conftest.py, которые находятся в директории с тестами

Будьте внимательны и следите, чтобы не было разных conftest во вложенных друг в друга директориях
Если такое произойдёт, то применится оба conftest.py файла и возникнут непредсказуемые ошибки!




Плагин - дополнительный модуль, который расширяет возможности чего либо.







