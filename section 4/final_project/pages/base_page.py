# Класс служит для реализации тестов согласно паттерну Page Object.

'''
Смысл паттерна Page Object заключается в том, что:
1) Каждая страница веб-приложения описывается в виде объекта класса.
Взаимодействие пользователя со стр. описывается с помощью методов класса.

Идеальный тест согласно паттерну Page Object описывает бизнес-логику тестового сценария скрывая все Selenium-методы взаимодействия браузера со стр.
    Другими словами пишем более абстрактный код!

Page Object — это абстрактный объект, который содержит в себе методы для работы с конкретной веб-страницей. 

Дополнительный плюс паттерна:
При изм. в верстке страницы исправляются не тесты, а только класс описывающий изм. страницу
'''

# Импорт искл., что будет обрабатываться
from selenium.common.exceptions import NoSuchElementException

# Данный класс описывает функционал взаимодействия с любой страницей в принципе.
# Взаимодействие с конкретными страницами будет реализовываться отдельными классами, 
# которые будут наследоваться от этого
class BasePage():
    def __init__(self, browser, url, timeout=10):
        self.browser = browser
        self.url = url
        self.browser.implicitly_wait(timeout) # Настройка неявного ожидания
        # Ожидания нужны, т.к. сайты и их эл. могут загружаться с задержками

    # Взаимодействие пользователя со страницей через объекты

    def open(self):
        self.browser.get(self.url)

    # Метод для перехвата исключения об отсутствующем элементе
    def is_element_present(self, how, what):
        try:
            self.browser.find_element(how, what)
        except (NoSuchElementException): # Обработка конкретной ошибки отсутствия эл.
            return False
        return True

